#!/bin/bash

# For password stuff
GPGKEYID="01578C79"

proxy()
{
  echo "Old:"
  myip
  export http_proxy="<PROXY HERE>"
  export https_proxy="<PROXY HERE>"
  echo "New:"
  myip
}

unproxy()
{
  echo "Old:"
  myip
  unset http_proxy
  unset https_proxy
  echo "New:"
  myip
}

switchOpenShift()
{
  pushd $HOME/.openshift
  ln -sf $1 express.conf
  popd
}

brcrl()
{
  source ~/.bashrc
}

screencap()
{
  if [ ! -d $HOME/Pictures/screenshots ]
  then
    mkdir -p $HOME/Pictures/screenshots
  fi

  api="cb9d0e71cde7c1d"
  date=$(date +%F-%R)
  filename="$HOME/Pictures/screenshots/$date.png"
  clear
  screenfetch
  scrot -c -d 5 "$filename"

  imgurres=$(curl -H "Authorization: Client-ID $api" -H "Expect: " -F "image=@$filename" \
    https://api.imgur.com/3/image 2> /dev/null)

  imageid=$(echo $imgurres | \
    sed -r 's/.*id":"([^"]+).*/\1/' )
  deletehash=$(echo $imgurres | \
    sed -r 's/.*deletehash":"([^"]+).*/\1/')

  echo "Image Uploaded: $imageid"
  echo "URL: https://i.imgur.com/$imageid.png"
  echo "Delete URL: https://imgur.com/delete/$deletehash"
}


addpass()
{

  if [ ! -d $HOME/.pass ]
  then
    mkdir $HOME/.pass
  fi

  read -p "Name the password: " name
  read -sp "Enter password: " pass
  echo $pass | gpg -e -a -r $GPGKEYID --no-tty > $HOME/.pass/$name 2>/dev/null
  echo ""
}

loadpass()
{
  if [ -z $@ ]
  then
    read -p "Which pass would you like to load? " toloadpass
  else
    toloadpass=$@
  fi
  
  export $toloadpass=$(gpg -d $HOME/.pass/$toloadpass)
}

loadallpass()
{
  for i in $HOME/.pass/*
  do
    toload=$(echo $i | sed 's/.*\///')
    export $toload="$(gpg -d $HOME/.pass/$toload 2>/dev/null)"
  done
}

unsetpass()
{
  if [ $@ == "" ]
  then
    read -p "Which pass would you like to unload? " unloadpass
  else
    unloadpass=$@
  fi

  unset $unloadpass
}

unsetallpass()
{
  for i in $HOME/.pass/*
  do
    tounload=$(echo $i | sed 's/.*\///')
    unset $tounload
  done
}

gitpullall()
{
  gpa_startbranch=$(git describe --contains --all HEAD)
  gpa_origins=($(git branch -l | sed 's/*//'))
  git fetch --all

  for i in ${gpa_origins[@]}
  do
    git checkout $i
    git pull --ff-only
  done

  git checkout $gpa_startbranch
}

androidtextinput()
{
  devices=($(adb devices | awk '/device$/{ print $1 }'))
  device=""
  if [[ ${#devices[@]} -gt 1 ]]; then
    let counter=0
    for dev in ${devices[@]}; do
      echo "$counter ) $dev"
      let counter=$counter+1
    done
    read -p "Select device to send text to: " dev

    if [[ -z ${devices[$dev]} ]]; then
      echo "Error selecting device"
      return
    else
      device=${devices[$dev]}
    fi
  else
    device=${devices}
  fi

  echo "Sending text to: ${device}"

  read -p "Enter text to send to the android device: " text
  safeText=$(echo $text | sed 's/ /%s/g')
  adb -s $device shell input text "$safeText"
}

change_wallpaper()
{
    pushd $HOME/Pictures > /dev/null

    WALLPAPERS=(Wallpapers/*)
    RNG_PAPER=$(( $RANDOM % ${#WALLPAPERS[@]} ))
    ln -sf ${WALLPAPERS[$RNG_PAPER]} wallpaper

    popd > /dev/null

    feh --bg-fill --no-xinerama $HOME/Pictures/wallpaper
}
